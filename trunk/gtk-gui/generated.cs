// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "Sosp.EarthOMeter.MainWindow")) {
                Gtk.Window cobj = ((Gtk.Window)(obj));
                // Widget Sosp.EarthOMeter.MainWindow
                cobj.Title = "EarthOMeter";
                Gtk.UIManager w1 = new Gtk.UIManager();
                Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
                Gtk.Action w3 = new Gtk.Action("paste", null, "Entfernungen aus Zwischenablage laden", "gtk-paste");
                bindings["paste"] = w3;
                w2.Add(w3, "<Control><Mod2>v");
                Gtk.Action w4 = new Gtk.Action("open", null, "Entfernungen aus KML Datei laden", "gtk-open");
                bindings["open"] = w4;
                w2.Add(w4, null);
                Gtk.Action w5 = new Gtk.Action("Bearbeiten", "Bearbeiten", null, null);
                w5.ShortLabel = "Bearbeiten";
                bindings["Bearbeiten"] = w5;
                w2.Add(w5, null);
                Gtk.Action w6 = new Gtk.Action("Hilfe", "Hilfe", null, null);
                w6.ShortLabel = "Hilfe";
                bindings["Hilfe"] = w6;
                w2.Add(w6, null);
                Gtk.Action w7 = new Gtk.Action("Info", "Info", null, "gtk-about");
                w7.ShortLabel = "Info";
                bindings["Info"] = w7;
                w2.Add(w7, null);
                w1.InsertActionGroup(w2, 0);
                cobj.AddAccelGroup(w1.AccelGroup);
                cobj.Icon = Gdk.Pixbuf.LoadFromResource("Icon22x22.png");
                cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                cobj.Events = ((Gdk.EventMask)(0));
                cobj.Name = "Sosp.EarthOMeter.MainWindow";
                // Container child Sosp.EarthOMeter.MainWindow.Gtk.Container+ContainerChild
                Gtk.VBox w8 = new Gtk.VBox();
                w8.Events = ((Gdk.EventMask)(0));
                w8.Name = "vbox1";
                // Container child vbox1.Gtk.Box+BoxChild
                w1.AddUiFromString("<ui><menubar name='menubar2'><menu action='Bearbeiten'><menuitem action='open'/><menuitem action='paste'/></menu><menu action='Hilfe'><menuitem action='Info'/></menu></menubar></ui>");
                Gtk.MenuBar w9 = ((Gtk.MenuBar)(w1.GetWidget("/menubar2")));
                w9.Events = ((Gdk.EventMask)(0));
                w9.Name = "menubar2";
                bindings["menubar2"] = w9;
                w8.Add(w9);
                Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w8[w9]));
                w10.Position = 0;
                w10.Expand = false;
                w10.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                w1.AddUiFromString("<ui><toolbar name='toolbar1'><toolitem action='open'/><toolitem action='paste'/></toolbar></ui>");
                Gtk.Toolbar w11 = ((Gtk.Toolbar)(w1.GetWidget("/toolbar1")));
                w11.ShowArrow = false;
                w11.ToolbarStyle = ((Gtk.ToolbarStyle)(0));
                w11.IconSize = ((Gtk.IconSize)(2));
                w11.Events = ((Gdk.EventMask)(0));
                w11.Name = "toolbar1";
                bindings["toolbar1"] = w11;
                w8.Add(w11);
                Gtk.Box.BoxChild w12 = ((Gtk.Box.BoxChild)(w8[w11]));
                w12.Position = 1;
                w12.Expand = false;
                w12.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.TreeView w13 = new Gtk.TreeView();
                w13.CanFocus = true;
                w13.Events = ((Gdk.EventMask)(0));
                w13.Name = "treeview1";
                bindings["treeview1"] = w13;
                w8.Add(w13);
                Gtk.Box.BoxChild w14 = ((Gtk.Box.BoxChild)(w8[w13]));
                w14.Position = 2;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.Statusbar w15 = new Gtk.Statusbar();
                w15.Events = ((Gdk.EventMask)(0));
                w15.Name = "statusbar1";
                bindings["statusbar1"] = w15;
                w8.Add(w15);
                Gtk.Box.BoxChild w16 = ((Gtk.Box.BoxChild)(w8[w15]));
                w16.Position = 3;
                w16.Expand = false;
                w16.Fill = false;
                bindings["vbox1"] = w8;
                cobj.Add(w8);
                cobj.DefaultWidth = 527;
                cobj.DefaultHeight = 300;
                bindings["Sosp.EarthOMeter.MainWindow"] = cobj;
                w9.Show();
                w11.Show();
                w13.Show();
                w15.Show();
                w8.Show();
                cobj.Show();
                cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
                w3.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "pasteActivated")));
                w4.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "openActivated")));
                w7.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "infoActivated")));
            }
            else {
                if ((id == "Sosp.EarthOMeter.About")) {
                    Gtk.Window cobj = ((Gtk.Window)(obj));
                    // Widget Sosp.EarthOMeter.About
                    cobj.Title = "Ãœber EarthOMeter";
                    cobj.Icon = Gdk.Pixbuf.LoadFromResource("Icon16x16.png");
                    cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                    cobj.Modal = true;
                    cobj.Resizable = false;
                    cobj.AllowGrow = false;
                    cobj.DefaultWidth = 300;
                    cobj.DefaultHeight = 400;
                    cobj.DestroyWithParent = true;
                    cobj.Gravity = ((Gdk.Gravity)(5));
                    cobj.Events = ((Gdk.EventMask)(0));
                    cobj.Name = "Sosp.EarthOMeter.About";
                    cobj.HeightRequest = 400;
                    cobj.WidthRequest = 300;
                    // Container child Sosp.EarthOMeter.About.Gtk.Container+ContainerChild
                    Gtk.VBox w1 = new Gtk.VBox();
                    w1.Events = ((Gdk.EventMask)(0));
                    w1.Name = "vbox1";
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Alignment w2 = new Gtk.Alignment(0.5F, 0.5F, 1F, 1F);
                    w2.Events = ((Gdk.EventMask)(0));
                    w2.Name = "alignment2";
                    // Container child alignment2.Gtk.Container+ContainerChild
                    Gtk.Label w3 = new Gtk.Label();
                    w3.LabelProp = "Version";
                    w3.Xpad = 20;
                    w3.Xalign = 0F;
                    w3.Yalign = 1F;
                    w3.Events = ((Gdk.EventMask)(0));
                    w3.Name = "lblVersionHeader";
                    w3.HeightRequest = 150;
                    bindings["lblVersionHeader"] = w3;
                    w2.Add(w3);
                    bindings["alignment2"] = w2;
                    w1.Add(w2);
                    Gtk.Box.BoxChild w5 = ((Gtk.Box.BoxChild)(w1[w2]));
                    w5.Position = 0;
                    w5.Expand = false;
                    w5.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w6 = new Gtk.Label();
                    w6.LabelProp = "label2";
                    w6.Selectable = true;
                    w6.Xpad = 30;
                    w6.Ypad = 5;
                    w6.Xalign = 0F;
                    w6.CanFocus = true;
                    w6.Events = ((Gdk.EventMask)(0));
                    w6.Name = "lblVersion";
                    bindings["lblVersion"] = w6;
                    w1.Add(w6);
                    Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(w1[w6]));
                    w7.Position = 1;
                    w7.Expand = false;
                    w7.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w8 = new Gtk.Label();
                    w8.LabelProp = "Lizenz";
                    w8.Xpad = 20;
                    w8.Ypad = 5;
                    w8.Xalign = 0F;
                    w8.Events = ((Gdk.EventMask)(0));
                    w8.Name = "lblLicenseHeader";
                    bindings["lblLicenseHeader"] = w8;
                    w1.Add(w8);
                    Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(w1[w8]));
                    w9.Position = 2;
                    w9.Expand = false;
                    w9.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w10 = new Gtk.Label();
                    w10.LabelProp = "GNU GENERAL PUBLIC LICENSE\nVersion 2, June 1991";
                    w10.Xpad = 30;
                    w10.Ypad = 5;
                    w10.Xalign = 0F;
                    w10.Events = ((Gdk.EventMask)(0));
                    w10.Name = "lblVersion1";
                    bindings["lblVersion1"] = w10;
                    w1.Add(w10);
                    Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(w1[w10]));
                    w11.Position = 3;
                    w11.Expand = false;
                    w11.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w12 = new Gtk.Label();
                    w12.LabelProp = "Copyright";
                    w12.Xpad = 20;
                    w12.Ypad = 5;
                    w12.Xalign = 0F;
                    w12.Events = ((Gdk.EventMask)(0));
                    w12.Name = "lblCopyrightHeader";
                    bindings["lblCopyrightHeader"] = w12;
                    w1.Add(w12);
                    Gtk.Box.BoxChild w13 = ((Gtk.Box.BoxChild)(w1[w12]));
                    w13.Position = 4;
                    w13.Expand = false;
                    w13.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w14 = new Gtk.Label();
                    w14.LabelProp = "Â© 2008 Softsprings\nAlois Flammensboeck";
                    w14.Xpad = 30;
                    w14.Xalign = 0F;
                    w14.Yalign = 0.02F;
                    w14.Events = ((Gdk.EventMask)(0));
                    w14.Name = "lblCopyright1";
                    w14.HeightRequest = 35;
                    bindings["lblCopyright1"] = w14;
                    w1.Add(w14);
                    Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w1[w14]));
                    w15.Position = 5;
                    w15.Expand = false;
                    w15.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w16 = new Gtk.Label();
                    w16.LabelProp = "http://www.softsprings.de";
                    w16.UseUnderline = true;
                    w16.Selectable = true;
                    w16.Xpad = 30;
                    w16.Xalign = 0F;
                    w16.Yalign = 0F;
                    w16.CanFocus = true;
                    w16.Events = ((Gdk.EventMask)(0));
                    w16.Name = "lblCopyright2";
                    w16.HeightRequest = 19;
                    bindings["lblCopyright2"] = w16;
                    w1.Add(w16);
                    Gtk.Box.BoxChild w17 = ((Gtk.Box.BoxChild)(w1[w16]));
                    w17.Position = 6;
                    w17.Expand = false;
                    w17.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Label w18 = new Gtk.Label();
                    w18.LabelProp = "info@softsprings.de";
                    w18.UseUnderline = true;
                    w18.Selectable = true;
                    w18.Xpad = 30;
                    w18.Xalign = 0F;
                    w18.Yalign = 0F;
                    w18.CanFocus = true;
                    w18.Events = ((Gdk.EventMask)(0));
                    w18.Name = "lblCopyright3";
                    bindings["lblCopyright3"] = w18;
                    w1.Add(w18);
                    Gtk.Box.BoxChild w19 = ((Gtk.Box.BoxChild)(w1[w18]));
                    w19.Position = 7;
                    w19.Expand = false;
                    w19.Fill = false;
                    bindings["vbox1"] = w1;
                    cobj.Add(w1);
                    bindings["Sosp.EarthOMeter.About"] = cobj;
                    w3.Show();
                    w2.Show();
                    w6.Show();
                    w8.Show();
                    w10.Show();
                    w12.Show();
                    w14.Show();
                    w16.Show();
                    w18.Show();
                    w1.Show();
                    cobj.Show();
                }
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
